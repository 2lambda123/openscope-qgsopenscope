# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QgsOpenScopeDialog
                                 A QGIS plugin
 A collection of tools for the openScope project

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-09-13
        git sha              : $Format:%H$
        copyright            : (C) 2019 by openScope
        email                : 3430117+oobayly@users.noreply.github.com

 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import tempfile

from qgis.core import QgsProject, QgsSettings
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QFileDialog, QMessageBox

from .OpenScope.AirportModel import AirportModel
from .OpenScope.ProjectGenerator import ProjectGenerator, ProjectGeneratorConfig


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'QgsOpenScope_dialog_base.ui'))


class QgsOpenScopeDialog(QtWidgets.QDialog, FORM_CLASS):
    """The Load Airport dialog."""

    _airport = None

    def __init__(self, parent=None):
        """Constructor."""
        super(QgsOpenScopeDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.txtAirportPath.setText(self._readSetting('txtAirportPath', ''))
        self.txtTempPath.setText(self._readSetting('txtTempPath', tempfile.tempdir))
        self.txtGSHHS.setText(self._readSetting('txtGSHHS', ''))

        self.butSelectAirport.clicked.connect(self._butSelectAirportClicked)
        self.butSelectTemp.clicked.connect(self._butSelectTempClicked)
        self.butSelectGSHHS.clicked.connect(self._butSelectGSHHSClicked)

        self.buttonBox.accepted.connect(self._buttonBoxAccepted)

    def _buttonBoxAccepted(self):
        """Handler for when the button box is accepted."""
        project = QgsProject.instance()

        project.clear()

        config = ProjectGeneratorConfig()
        config.tmpPath = self.txtTempPath.text() or tempfile.tempdir
        config.gshhsPath = self.txtGSHHS.text() or None
        config.contourInterval = 304.8

        fileName = self.txtAirportPath.text()
        airport = AirportModel(fileName)

        if not os.path.isfile(fileName):
            QMessageBox.warning('Airport File \'%s\' does not exist.' % fileName)
            return
        if not os.path.isdir(config.tmpPath):
            QMessageBox.warning('The path \'%s\' does not exist.' % config.tmpPath)
            return
        if not os.path.isdir(config.gshhsPath):
            QMessageBox.warning('The path \'%s\' does not exist.' % config.gshhsPath)
            return

        self._saveSetting('txtAirportPath', fileName)
        self._saveSetting('txtTempPath', config.tmpPath)
        self._saveSetting('txtGSHHS', config.gshhsPath)

        proj = ProjectGenerator(airport, config)
        proj.populateProject()

    def _butSelectAirportClicked(self, _e):
        """Handler for when the Select Airport button is clicked."""
        currentPath = self.txtAirportPath.text()
        if not os.path.exists(currentPath):
            currentPath = None

        airportFile, _ = QFileDialog.getOpenFileName(
            None,
            'Load openScope Airport',
            currentPath,
            'Airport Files(*.json)'
        )

        if airportFile:
            self.txtAirportPath.setText(airportFile)
            self._saveSetting('txtAirportPath', airportFile)

    def _butSelectGSHHSClicked(self, _e):
        """Handler for when the Select GSHHG button is clicked."""
        directory = QFileDialog.getExistingDirectory(
            None,
            'Select GSHHS Directory',
            self.txtGSHHS.text()
        )

        if directory:
            self.txtGSHHS.setText(directory)
            self._saveSetting('txtGSHHS', directory)

    def _butSelectTempClicked(self, _e):
        """Handler for when the Select Temp button is clicked."""
        directory = QFileDialog.getExistingDirectory(
            None,
            'Select Temp Directory',
            self.txtTempPath.text()
        )

        if directory:
            self.txtTempPath.setText(directory)
            self._saveSetting('txtTempPath', directory)

    def _readSetting(self, key, defaultValue):
        """Read the setting with specified key."""
        s = QgsSettings()
        return s.value('%(plugin)s/%(key)s' % {
            'plugin': type(self).__name__,
            'key': key
        }, defaultValue)

    def _saveSetting(self, key, value):
        """Saves  the setting with specified key."""
        s = QgsSettings()
        s.setValue('%(plugin)s/%(key)s' % {
            'plugin': type(self).__name__,
            'key': key
        }, value)
