# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QgsOpenScope
                                 A QGIS plugin
 A collection of tools for the openScope project

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-09-13
        git sha              : $Format:%H$
        copyright            : (C) 2019 by openScope
        email                : 3430117+oobayly@users.noreply.github.com

 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
#pylint: disable=broad-except

import os.path

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QApplication, QFileDialog, QInputDialog, QMessageBox

from qgis.core import QgsProject, QgsVectorFileWriter

import processing # pylint: disable=import-error

# Initialize Qt resources from file resources.py
from .resources import * # pylint: disable=wildcard-import,unused-wildcard-import

# Import the code for the dialog
from .settings_dialog import SettingsDialog

from .OpenScope.AirspaceModel import AirspaceModel
from .OpenScope.FixModel import FixModel
from .OpenScope.MapModel import MapModel
from .OpenScope.RestrictedModel import RestrictedModel
from .OpenScope.ProjectGenerator import ProjectGenerator, ProjectGeneratorConfig
from .OpenScope.TerrainGenerator import TerrainGenerator, TerrainGeneratorConfig
from .OpenScope.utilities.drawing import drawCircles, drawRunwayExtension
from .OpenScope.utilities.functions import EXPORT_PRECISION

class QgsOpenScope:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.pluginDir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        localePath = os.path.join(
            self.pluginDir,
            'i18n',
            'QgsOpenScope_{}.qm'.format(locale))

        if os.path.exists(localePath):
            self.translator = QTranslator()
            self.translator.load(localePath)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QgsOpenScope')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.firstStart = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QgsOpenScope', message)


    # pylint: disable=too-many-arguments
    def addAction(
            self,
            iconPath,
            text,
            callback,
            isEnabled=True,
            isMenuItem=True,
            isToolbarItem=True,
            statusTip=None,
            whatsThis=None,
            parent=None
        ):
        """Add a toolbar icon to the toolbar.

        :param iconPath: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type iconPath: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param isEnabled: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type isEnabled: bool

        :param isMenuItem: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type isMenuItem: bool

        :param isToolbarItem: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type isToolbarItem: bool

        :param statusTip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type statusTip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whatsThis: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(iconPath)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(isEnabled)

        if statusTip is not None:
            action.setStatusTip(statusTip)

        if whatsThis is not None:
            action.setWhatsThis(whatsThis)

        if isToolbarItem:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if isMenuItem:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def addMenuSeparator(self):
        """Adds a separator to the specified menu bar"""
        separator = QAction()
        separator.setSeparator(True)

        self.iface.addPluginToMenu(self.menu, separator)
        self.actions.append(separator)

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        #iconPath = ':/plugins/QgsOpenScope/icon.png'

        # Load
        self.addAction(
            ':/plugins/QgsOpenScope/icons/airport-import.png',
            text=self.tr(u'Load Airport'),
            callback=self.loadAirport,
            parent=self.iface.mainWindow(),
            isToolbarItem=True
        )
        self.addAction(
            ':/plugins/QgsOpenScope/icons/terrain-import.png',
            text='Generate Terrain',
            callback=self.generateTerrain,
            parent=self.iface.mainWindow(),
            isToolbarItem=True
        )

        # Export
        self.addMenuSeparator()
        self.addAction(
            None,
            text='Export Airspace',
            callback=self.exportAirspace,
            parent=self.iface.mainWindow(),
            isToolbarItem=False
        )
        self.addAction(
            None,
            text='Export Fixes',
            callback=self.exportFixes,
            parent=self.iface.mainWindow(),
            isToolbarItem=False
        )
        self.addAction(
            None,
            text='Export Maps',
            callback=self.exportMaps,
            parent=self.iface.mainWindow(),
            isToolbarItem=False
        )
        self.addAction(
            None,
            text='Export Restricted',
            callback=self.exportRestricted,
            parent=self.iface.mainWindow(),
            isToolbarItem=False
        )
        self.addAction(
            ':/plugins/QgsOpenScope/icons/terrain-export.png',
            text='Export Terrain',
            callback=self.exportTerrain,
            parent=self.iface.mainWindow(),
            isToolbarItem=False
        )

        # Drawing
        self.addMenuSeparator()
        self.addAction(
            ':/plugins/QgsOpenScope/icons/draw-circle.png',
            text='Draw Circle around points',
            callback=self.drawCircles,
            parent=self.iface.mainWindow(),
            isToolbarItem=True
        )
        self.addAction(
            ':/plugins/QgsOpenScope/icons/draw-runways.png',
            text='Draw Extended Runway Centrelines',
            callback=self.drawRunwayExtensions,
            parent=self.iface.mainWindow(),
            isToolbarItem=True
        )

        # Settings
        self.addMenuSeparator()
        self.addAction(
            None,
            text='QgsOpenScope Settings',
            callback=self.showSettingsDialog,
            parent=self.iface.mainWindow(),
            isToolbarItem=False
        )

        # will be set False in run()
        self.firstStart = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QgsOpenScope'),
                action)
            self.iface.removeToolBarIcon(action)


    def copyToClipboard(self, text):
        """Copies the specified text to the clipboard."""
        cb = QApplication.clipboard()
        cb.clear(mode=cb.Clipboard)
        cb.setText(text, mode=cb.Clipboard)

    def drawCircles(self):
        """Draws a circle around the selected points"""

        radius, okPress = QInputDialog.getInt(
            None,
            'Circle Radius',
            'The circle radius in NM:',
            5,
            1,
            step=5
        )

        if not okPress:
            return

        try:
            drawCircles(radius)
        except Exception as e:
            QMessageBox.warning(None, 'QgsOpenScope', str(e))

    def drawRunwayExtensions(self):
        """Draw the extended runway centrelines"""

        length, okPress = QInputDialog.getInt(
            None,
            'Extended Runway Centrelines',
            'The total length in NM:',
            8,
            1,
            step=4
        )

        if not okPress:
            return

        try:
            drawRunwayExtension(length)
        except Exception as e:
            QMessageBox.warning(None, 'QgsOpenScope', str(e))

    def exportAirspace(self):
        """Exports the Airspace features as JSON."""
        airspaces = QgsProject.instance().mapLayersByName('Airspace')

        if not airspaces:
            QMessageBox.information(None, 'QgsOpenScope', 'Couldn\'t find a \'Airspace\' layer.')
            return

        self.copyToClipboard(AirspaceModel.export(airspaces[0]))
        QMessageBox.information(None, 'QgsOpenScope', 'Airspace JSON has been copied to the clipboard.')

    def exportFixes(self):
        """Exports the Fixes features as JSON."""
        fixes = QgsProject.instance().mapLayersByName('Fixes')

        if not fixes:
            QMessageBox.information(None, 'QgsOpenScope', 'Couldn\'t find a \'Fixes\' layer.')
            return

        self.copyToClipboard(FixModel.export(fixes[0]))
        QMessageBox.information(None, 'QgsOpenScope', 'Fixes JSON has been copied to the clipboard.')

    def exportRestricted(self):
        """Exports the Restricted Airspace features as JSON."""
        restricted = QgsProject.instance().mapLayersByName('Restricted')

        if not restricted:
            QMessageBox.information(None, 'QgsOpenScope', 'Couldn\'t find a \'Restricted\' layer.')
            return

        self.copyToClipboard(RestrictedModel.export(restricted[0]))
        QMessageBox.information(None, 'QgsOpenScope', 'Restricted Airspace JSON has been copied to the clipboard.')

    def exportMaps(self):
        """Exports the Map layers as JSON."""
        mapsGroup = QgsProject.instance().layerTreeRoot().findGroup('Maps')

        if not mapsGroup:
            QMessageBox.information(None, 'QgsOpenScope', 'Couldn\'t find any Map layers.')
            return

        layers = list(map(lambda x: x.layer(), mapsGroup.children()))

        self.copyToClipboard(MapModel.export(layers))
        QMessageBox.information(None, 'QgsOpenScope', 'Map JSON has been copied to the clipboard.')

    def exportTerrain(self):
        """Exports the Terrain as GeoJSON."""
        selected = self.iface.layerTreeView().selectedLayers()

        if not selected:
            QMessageBox.information(None, 'QgsOpenScope', 'At least one terrain layer must be selected for export.')
            return

        for layer in selected:
            if layer.fields().indexFromName('elevation') == -1:
                QMessageBox.information(
                    None,
                    'QgsOpenScope',
                    'The \'%s\' layer doesn\'t have an elevation attribute.' % layer.name()
                )
                return

        fileName, _ = QFileDialog.getSaveFileName(None, 'Save openScope terrain', '', 'Terrain Files (*.geojson)')
        if not fileName:
            return

        result = processing.run('qgis:mergevectorlayers', {
            'LAYERS': selected,
            'OUTPUT': 'memory:'
        })
        merged = result['OUTPUT']
        merged.setName('Terrain - Merged')

        QgsVectorFileWriter.writeAsVectorFormat(
            merged,
            fileName,
            'utf-8',
            merged.crs(),
            'GeoJson',
            attributes=[
                merged.fields().indexFromName('elevation') # Only the elevation layer
            ],
            layerOptions=[
                'COORDINATE_PRECISION=%d' % EXPORT_PRECISION
            ]
        )

    def generateTerrain(self):
        """Generates the terrain"""

        if TerrainGenerator.hasExistingLayers():
            message = """This will remove all existing layers from the Terrain group.
    Are you sure you want to continue?"""

            response = QMessageBox.question(
                None,
                'QgsOpenScope',
                message,
                QMessageBox.Yes, QMessageBox.No
            )

            if response == QMessageBox.No:
                return

        airportFile = self.getAirportFile()

        if not airportFile:
            return

        config = TerrainGeneratorConfig()

        config.airportFile = airportFile
        config.gshhsPath = SettingsDialog.getGSHHSPath()
        config.tmpPath = SettingsDialog.getTempPath()
        config.contourInterval = 304.8

        try:
            terrain = TerrainGenerator(config)
            terrain.generateTerrain()
        except Exception as e:
            QMessageBox.warning(None, 'QgsOpenScope', str(e))

    def getAirportFile(self):
        """Prompts the user to select an airport file and returns the AirportModel"""

        fileName, _ = QFileDialog.getOpenFileName(
            None,
            'Load openScope Airport',
            SettingsDialog.getLastAirportPath(),
            'Airport Files(*.json)',
        )

        if not fileName:
            return None
        if not os.path.isfile(fileName):
            QMessageBox.warning(None, 'QgsOpenScope', 'Airport File \'%s\' does not exist.' % fileName)
            return None

        SettingsDialog.setLastAirportPath(fileName)

        return fileName

    def loadAirport(self):
        """Loads an airport into the workspace"""

        if ProjectGenerator.hasExistingLayers():
            message = """This will remove all existing layers from the project.
    Are you sure you want to continue?"""

            response = QMessageBox.question(
                None,
                'QgsOpenScope',
                message,
                QMessageBox.Yes, QMessageBox.No
            )

            if response == QMessageBox.No:
                return

        airportFile = self.getAirportFile()

        if not airportFile:
            return

        project = QgsProject.instance()

        project.clear()

        config = ProjectGeneratorConfig()

        config.airportFile = airportFile
        config.tmpPath = SettingsDialog.getTempPath()

        try:
            proj = ProjectGenerator(config)
            proj.populateProject()
        except Exception as e:
            QMessageBox.warning(None, 'QgsOpenScope', str(e))

    def showSettingsDialog(self):
        """Show the settings dialog"""

        dlg = SettingsDialog()

        # Show and run the dialog event loop
        dlg.show()
        result = dlg.exec_()

        if result:
            pass
